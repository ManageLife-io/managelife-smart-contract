const { ethers } = require("hardhat");

async function main() {
    console.log("üöÄ ÈÉ®ÁΩ≤ GnosisStyleMultiSig - 3‰∫∫Âõ¢Èòü 2/3 Á≠æÂêçÊñπÊ°à");
    console.log("=" .repeat(60));
    
    // Ëé∑ÂèñÈÉ®ÁΩ≤Ë¥¶Êà∑
    const [deployer] = await ethers.getSigners();
    console.log("ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
    console.log("Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.utils.formatEther(await deployer.getBalance()), "ETH");
    
    // 3‰∫∫Âõ¢ÈòüÈÖçÁΩÆ - ËØ∑ÊõøÊç¢‰∏∫ÂÆûÈôÖÁöÑÈí±ÂåÖÂú∞ÂùÄ
    const teamConfig = {
        owners: [
            "0x1234567890123456789012345678901234567890", // Âõ¢ÈòüÊàêÂëò1 - Âº†‰∏â
            "0x2345678901234567890123456789012345678901", // Âõ¢ÈòüÊàêÂëò2 - ÊùéÂõõ  
            "0x3456789012345678901234567890123456789012"  // Âõ¢ÈòüÊàêÂëò3 - Áéã‰∫î
        ],
        threshold: 2, // 3‰∏™‰∫∫‰∏≠ÈúÄË¶Å2‰∏™Á≠æÂêç
        teamNames: ["Âº†‰∏â", "ÊùéÂõõ", "Áéã‰∫î"]
    };
    
    console.log("\nüìã Âõ¢ÈòüÈÖçÁΩÆ:");
    console.log("- Âõ¢ÈòüËßÑÊ®°: 3‰∫∫");
    console.log("- Á≠æÂêçÈòàÂÄº: 2/3 (ÈúÄË¶Å2‰∏™‰∫∫Á≠æÂêç)");
    console.log("- ÂÆâÂÖ®Á∫ßÂà´: È´ò (67%ÂêåÊÑèÁéá)");
    
    console.log("\nüë• Âõ¢ÈòüÊàêÂëò:");
    teamConfig.owners.forEach((address, index) => {
        console.log(`  ${index + 1}. ${teamConfig.teamNames[index]}: ${address}`);
    });
    
    // ÈÉ®ÁΩ≤ GnosisStyleMultiSig ÂêàÁ∫¶
    console.log("\nüî® ÂºÄÂßãÈÉ®ÁΩ≤ GnosisStyleMultiSig ÂêàÁ∫¶...");
    const GnosisStyleMultiSig = await ethers.getContractFactory("GnosisStyleMultiSig");
    
    console.log("Ê≠£Âú®ÈÉ®ÁΩ≤ÂêàÁ∫¶...");
    const multiSig = await GnosisStyleMultiSig.deploy(teamConfig.owners, teamConfig.threshold);
    
    console.log("Á≠âÂæÖÂêàÁ∫¶Á°ÆËÆ§...");
    await multiSig.deployed();
    
    console.log("‚úÖ ÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü!");
    console.log("ÂêàÁ∫¶Âú∞ÂùÄ:", multiSig.address);
    
    // È™åËØÅÈÉ®ÁΩ≤ÁªìÊûú
    console.log("\nüîç È™åËØÅÈÉ®ÁΩ≤ÁªìÊûú...");
    const deployedOwners = await multiSig.getOwners();
    const deployedThreshold = await multiSig.threshold();
    const ownerCount = await multiSig.getOwnerCount();
    
    console.log("‚úì ÊâÄÊúâËÄÖÊï∞Èáè:", ownerCount.toString());
    console.log("‚úì Á≠æÂêçÈòàÂÄº:", deployedThreshold.toString());
    console.log("‚úì ÊâÄÊúâËÄÖÂú∞ÂùÄÈ™åËØÅ:");
    deployedOwners.forEach((address, index) => {
        const isMatch = address.toLowerCase() === teamConfig.owners[index].toLowerCase();
        console.log(`  ${index + 1}. ${teamConfig.teamNames[index]}: ${address} ${isMatch ? '‚úì' : '‚úó'}`);
    });
    
    // Ëé∑ÂèñÁΩëÁªú‰ø°ÊÅØ
    const network = await ethers.provider.getNetwork();
    const blockNumber = await ethers.provider.getBlockNumber();
    
    // ÁîüÊàêÈÉ®ÁΩ≤Êä•Âëä
    const deploymentReport = {
        contractInfo: {
            name: "GnosisStyleMultiSig",
            address: multiSig.address,
            deployer: deployer.address,
            network: {
                name: network.name,
                chainId: network.chainId,
                blockNumber: blockNumber
            }
        },
        teamConfig: {
            owners: teamConfig.owners,
            ownerNames: teamConfig.teamNames,
            threshold: teamConfig.threshold,
            securityLevel: "È´ò (2/3 = 67%)"
        },
        deployment: {
            timestamp: new Date().toISOString(),
            gasUsed: "ÂæÖÁ°ÆËÆ§",
            status: "ÊàêÂäü"
        }
    };
    
    console.log("\nüìä ÈÉ®ÁΩ≤Êä•Âëä:");
    console.log(JSON.stringify(deploymentReport, null, 2));
    
    // ‰ΩøÁî®ÊåáÂçó
    console.log("\n" + "=".repeat(60));
    console.log("üéØ GnosisStyleMultiSig ‰ΩøÁî®ÊåáÂçó (3‰∫∫Âõ¢Èòü 2/3Á≠æÂêç)");
    console.log("=".repeat(60));
    
    console.log("\nüìù Ê†∏ÂøÉÁâπÊÄß:");
    console.log("‚úÖ Êó†Êó∂Èó¥ÈîÅÂª∂Ëøü - Á≠æÂ§ü2‰∏™‰∫∫Á´ãÂç≥ÊâßË°å");
    console.log("‚úÖ Á°¨‰ª∂Èí±ÂåÖÊîØÊåÅ - ÂÖºÂÆπ Ledger„ÄÅTrezor");
    console.log("‚úÖ EIP-712 Ê†áÂáÜ - ÂÆâÂÖ®ÁöÑÁ¶ªÁ∫øÁ≠æÂêç");
    console.log("‚úÖ Gas ‰ºòÂåñ - ÊâπÈáèÁ≠æÂêçÈ™åËØÅ");
    
    console.log("\nüîÑ Êó•Â∏∏‰ΩøÁî®ÊµÅÁ®ã:");
    console.log("1Ô∏è‚É£  ÁîüÊàê‰∫§ÊòìÂìàÂ∏å");
    console.log("2Ô∏è‚É£  Âõ¢ÈòüÊàêÂëòÁ¶ªÁ∫øÁ≠æÂêç (ÈúÄË¶Å2‰∏™Á≠æÂêç)");
    console.log("3Ô∏è‚É£  Êèê‰∫§Á≠æÂêçÂπ∂Á´ãÂç≥ÊâßË°å");
    
    console.log("\nüí° ‰ª£Á†ÅÁ§∫‰æã:");
    console.log(`
// 1. ÁîüÊàê‰∫§ÊòìÂìàÂ∏å
const txHash = await multiSig.getTransactionHash(
    "0xÁõÆÊ†áÂú∞ÂùÄ",
    ethers.utils.parseEther("1"), // 1 ETH
    "0x", // ËΩ¨Ë¥¶Êï∞ÊçÆ‰∏∫Á©∫
    await multiSig.nonce()
);

// 2. Âõ¢ÈòüÊàêÂëòÁ≠æÂêç (Ëá≥Â∞ë2‰∏™)
const signature1 = await Âº†‰∏â.signMessage(ethers.utils.arrayify(txHash));
const signature2 = await ÊùéÂõõ.signMessage(ethers.utils.arrayify(txHash));

// 3. ÂêàÂπ∂Á≠æÂêçÂπ∂ÊâßË°å (ÊåâÂú∞ÂùÄÊéíÂ∫è)
const signatures = signature1 + signature2.slice(2);
await multiSig.execTransaction(
    "0xÁõÆÊ†áÂú∞ÂùÄ",
    ethers.utils.parseEther("1"),
    "0x",
    signatures
);
    `);
    
    console.log("\nüîê Á°¨‰ª∂Èí±ÂåÖÈõÜÊàê:");
    console.log("- Ledger: ‰ΩøÁî® @ledgerhq/hw-app-eth");
    console.log("- Trezor: ‰ΩøÁî® trezor-connect");
    console.log("- MetaMask: Áõ¥Êé•ÊîØÊåÅ EIP-712 Á≠æÂêç");
    
    console.log("\n‚ö†Ô∏è  ÈáçË¶ÅÊèêÈÜí:");
    console.log("1. ËØ∑Â∞ÜÁ§∫‰æãÂú∞ÂùÄÊõøÊç¢‰∏∫ÂÆûÈôÖÁöÑÂõ¢ÈòüÊàêÂëòÂú∞ÂùÄ");
    console.log("2. Âª∫ËÆÆÂÖàÁî®Â∞èÈ¢ùÊµãËØï‰∫§ÊòìÈ™åËØÅÊµÅÁ®ã");
    console.log("3. Á°Æ‰øùÊâÄÊúâÊàêÂëòÈÉΩÈÖçÁΩÆÂ•ΩÁ°¨‰ª∂Èí±ÂåÖ");
    console.log("4. ‰øùÂ≠òÂ•ΩÂêàÁ∫¶Âú∞ÂùÄÂíåÈÉ®ÁΩ≤‰ø°ÊÅØ");
    
    console.log("\nüõ°Ô∏è  ÂÆâÂÖ®Âª∫ËÆÆ:");
    console.log("- ‰ΩøÁî®Á°¨‰ª∂Èí±ÂåÖÂ≠òÂÇ®ÁßÅÈí•");
    console.log("- ÂÆöÊúüËΩÆÊç¢Âõ¢ÈòüÊàêÂëòÂú∞ÂùÄ");
    console.log("- Âª∫Á´ãÂ∫îÊÄ•ËÅîÁ≥ªÊú∫Âà∂");
    console.log("- Âà∂ÂÆöÁßÅÈí•‰∏¢Â§±Â§ÑÁêÜÈ¢ÑÊ°à");
    
    console.log("\nüìû ÊäÄÊúØÊîØÊåÅ:");
    console.log("- ÂêàÁ∫¶Ê∫êÁ†Å: contracts/governance/GnosisStyleMultiSig.sol");
    console.log("- ÊµãËØïÊñá‰ª∂: tests/MultiSig.test.js");
    console.log("- ‰ΩøÁî®ÊñáÊ°£: docs/MultiSig-Usage-Guide.md");
    
    console.log("\nüéâ ÈÉ®ÁΩ≤ÂÆåÊàê! ÂêàÁ∫¶Âú∞ÂùÄ:", multiSig.address);
    
    return {
        contractAddress: multiSig.address,
        deploymentReport: deploymentReport
    };
}

// ÈîôËØØÂ§ÑÁêÜ
main()
    .then((result) => {
        console.log("\n‚úÖ ÈÉ®ÁΩ≤ËÑöÊú¨ÊâßË°åÊàêÂäü!");
        console.log("ÂêàÁ∫¶Âú∞ÂùÄ:", result.contractAddress);
        process.exit(0);
    })
    .catch((error) => {
        console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });